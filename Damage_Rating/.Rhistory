a %>% filter(n_games >=  8, position  == pos) %>%
ggplot(aes(x = goldspent, y = resid*100,
color = champion, shape = champion)) +
geom_point(aes(alpha = champion), stroke = 0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, ncol = 4) +
theme_minimal() +
labs(y = "% difference from expected",
x = "expected damage to champs") +
theme(panel.spacing = unit(1, "lines"),
axis.text.x = element_text(size = 7)) +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_abline(aes(slope = 1, intercept = 0), color = "gray") +
scale_y_continuous(breaks = seq(-100, max_y, by = 50),
minor_breaks = seq(-100, max_y, by = 10))
nrows <- ceiling(unique(p$player) %>% length %>% `/`(4))
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg,
"_breakdown_", pos, ".png"),
width = 9, height = 2.2*nrows)
})
})
pos
j
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes_string(y = "predicted",
color = ifelse(j == 1, NULL, "factor(result)"),
group=factor(result)),
data=predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes_string(y = "predicted",
color = ifelse(j == 1, NULL, "factor(result)")),
#                             group = factor(result)),
data=predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
j
j <- 1
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes_string(y = "predicted",
color = ifelse(j == 1, NULL, "factor(result)")),
#                             group = factor(result)),
data=predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
j <- 1
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position == pos]))
if (j == 1){
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes(y = predicted),
data = predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
} else {
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes(y = predicted,color = factor(result)),
data = predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
}
ggsave(paste0(savefolder, lpre_folders[j], "/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 10)
ggplot(matchdata %>% filter(position == pos),
aes(x = log(predicted), y = resid*100)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))+
labs(x = "ln(expected damage to champs)",
y = "% difference from expected",
shape = NULL, color = NULL)
ggsave(paste0(savefolder, lpre_folders[j], "/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
})
j
j <- 1 #choose which LPRE model to use
lpre_models <- list(
~ champion*log(goldspent) + position*log(goldspent),
~ champion*log(goldspent) + position*log(goldspent) + result
)
lpre_folders <- c("LPRE", "LPRE_result")
xpredmatrix <- model.matrix(lpre_models[[j]], data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xpredmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xpredmatrix,beta0)
fitted <- exp(xpredmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
matchdata$predicted <- fitted
matchdata$resid <- residuals/fitted
(residuals/fitted)^2 %>% mean
#To graph a smooth `expected damage` curve, need to get predicted values
#at regular points up to max `goldspent` in dataset
r_gold <- range(matchdata$goldspent)
champ_pos <- unique(matchdata[,c("champion", "position")])
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
predictions <- map2_df(champ_pos$champion, champ_pos$position, function(champ, pos){
r_gold <- matchdata %>% filter(champion == champ, position == pos) %>%
`$`(goldspent) %>% range()
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
tibble(
goldspent = rep(goldseq, 2),
result = rep(c(0,1), each = len_g),
predicted = NA,
resid = NA,
champion = champ,
position = pos
)  })
xpredmatrix <- model.matrix(lpre_models[[j]], data = predictions)
predictions$predicted <- exp(xpredmatrix %*% temp$beta.hat)
matchdata$resid <- as.vector(matchdata$resid)
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position == pos]))
if (j == 1){
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes(y = predicted),
data = predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
} else {
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes(y = predicted,color = factor(result)),
data = predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
}
ggsave(paste0(savefolder, lpre_folders[j], "/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 10)
ggplot(matchdata %>% filter(position == pos),
aes(x = log(predicted), y = resid*100)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))+
labs(x = "ln(expected damage to champs)",
y = "% difference from expected",
shape = NULL, color = NULL)
ggsave(paste0(savefolder, lpre_folders[j], "/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
})
walk(unique(adj_data$league), function(lg){
a <- adj_data %>% filter(league  == lg)
a %>%
select(league, team, player, champion, dmgtochamps, predicted, goldspent) %>%
write_csv(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_dmg_vals.csv"))
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits = 2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_dmg_ratings.csv"))
cd <- a %>% filter(n_games >=  8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
median_predicted = median(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff = ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- cd %>%
left_join(cd %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)),
by = "position")
cd %>%
ggplot(aes(x = mean_r, y = median_r)) +
labs(y = "median % difference from expected",
size = "% of highest prediction/position",
x = "mean % difference from expected") +
geom_point(aes(size = avg_predicted/max_predicted), alpha = 0.7) +
geom_abline(aes(slope = 1, intercept = 0), color = "gray", linetype = "dotdash") +
geom_vline(aes(xintercept = 0), color = "gray") +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_text_repel(aes(label = player), force = 3,
size = 2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_meanvsmedian_graph.png"),
width = 10, height = 7.5)
cd %>%
ggplot(aes(x = median_predicted, y = median_r)) +
facet_wrap(~position, scales = "free_x") +
geom_point(alpha = 0.7, size = 2) +
geom_hline(aes(yintercept = 0), alpha = 0.7) +
geom_text_repel(aes(label = player), size = 3) +
theme_minimal() +
theme(legend.position = "bottom",
panel.spacing = unit(2, "lines")) +
labs(x = "median expected damage",
y = "median % difference from expected")
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_dmgvsresid_graph.png"),
width = 10, height = 7.5)
color_vals <- rep(c(blue, yellow, red), 6)
shape_vals <- rep(1:6, each = 3)
alpha_vals <- rep(seq(1, 0.5, by = -0.1), 3)
walk(unique(a$position), function(pos){
n_champs <- unique(a$champion[a$position  == pos]) %>% length
p <- a %>% filter(n_games >=  8, position  == pos)
max_y <- (max(p$resid*100) + 1) %>% signif(digits = 2)
a %>% filter(n_games >=  8, position  == pos) %>%
ggplot(aes(x = goldspent, y = resid*100,
color = champion, shape = champion)) +
geom_point(aes(alpha = champion), stroke = 0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, ncol = 4) +
theme_minimal() +
labs(y = "% difference from expected",
x = "expected damage to champs") +
theme(panel.spacing = unit(1, "lines"),
axis.text.x = element_text(size = 7)) +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_abline(aes(slope = 1, intercept = 0), color = "gray") +
scale_y_continuous(breaks = seq(-100, max_y, by = 50),
minor_breaks = seq(-100, max_y, by = 10))
nrows <- ceiling(unique(p$player) %>% length %>% `/`(4))
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg,
"_breakdown_", pos, ".png"),
width = 9, height = 2.2*nrows)
})
})
j <- 2
lpre_models <- list(
~ champion*log(goldspent) + position*log(goldspent),
~ champion*log(goldspent) + position*log(goldspent) + result
)
lpre_folders <- c("LPRE", "LPRE_result")
xpredmatrix <- model.matrix(lpre_models[[j]], data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xpredmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xpredmatrix,beta0)
fitted <- exp(xpredmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
matchdata$predicted <- fitted
matchdata$resid <- residuals/fitted
(residuals/fitted)^2 %>% mean
#To graph a smooth `expected damage` curve, need to get predicted values
#at regular points up to max `goldspent` in dataset
r_gold <- range(matchdata$goldspent)
champ_pos <- unique(matchdata[,c("champion", "position")])
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
predictions <- map2_df(champ_pos$champion, champ_pos$position, function(champ, pos){
r_gold <- matchdata %>% filter(champion == champ, position == pos) %>%
`$`(goldspent) %>% range()
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
tibble(
goldspent = rep(goldseq, 2),
result = rep(c(0,1), each = len_g),
predicted = NA,
resid = NA,
champion = champ,
position = pos
)  })
xpredmatrix <- model.matrix(lpre_models[[j]], data = predictions)
predictions$predicted <- exp(xpredmatrix %*% temp$beta.hat)
matchdata$resid <- as.vector(matchdata$resid)
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position == pos]))
if (j == 1){
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes(y = predicted),
data = predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
} else {
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_line(aes(y = predicted,color = factor(result)),
data = predictions %>% filter(position == pos)) +
facet_wrap(~champion, ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x = "gold spent",
y = "damage to champs",
shape = NULL, color = NULL)
}
ggsave(paste0(savefolder, lpre_folders[j], "/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 10)
ggplot(matchdata %>% filter(position == pos),
aes(x = log(predicted), y = resid*100)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_shape_manual(labels = c("loss", "win"),
values = c(16, 17)) +
scale_color_manual(values = c(blue, red),
labels = c("loss", "win")) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))+
labs(x = "ln(expected damage to champs)",
y = "% difference from expected",
shape = NULL, color = NULL)
ggsave(paste0(savefolder, lpre_folders[j], "/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
})
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) ,
by = c("player", "position"))
walk(unique(adj_data$league), function(lg){
a <- adj_data %>% filter(league  == lg)
a %>%
select(league, team, player, champion, dmgtochamps, predicted, goldspent) %>%
write_csv(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_dmg_vals.csv"))
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits = 2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_dmg_ratings.csv"))
cd <- a %>% filter(n_games >=  8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
median_predicted = median(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff = ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- cd %>%
left_join(cd %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)),
by = "position")
cd %>%
ggplot(aes(x = mean_r, y = median_r)) +
labs(y = "median % difference from expected",
size = "% of highest prediction/position",
x = "mean % difference from expected") +
geom_point(aes(size = avg_predicted/max_predicted), alpha = 0.7) +
geom_abline(aes(slope = 1, intercept = 0), color = "gray", linetype = "dotdash") +
geom_vline(aes(xintercept = 0), color = "gray") +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_text_repel(aes(label = player), force = 3,
size = 2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_meanvsmedian_graph.png"),
width = 10, height = 7.5)
cd %>%
ggplot(aes(x = median_predicted, y = median_r)) +
facet_wrap(~position, scales = "free_x") +
geom_point(alpha = 0.7, size = 2) +
geom_hline(aes(yintercept = 0), alpha = 0.7) +
geom_text_repel(aes(label = player), size = 3) +
theme_minimal() +
theme(legend.position = "bottom",
panel.spacing = unit(2, "lines")) +
labs(x = "median expected damage",
y = "median % difference from expected")
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg, "_dmgvsresid_graph.png"),
width = 10, height = 7.5)
color_vals <- rep(c(blue, yellow, red), 6)
shape_vals <- rep(1:6, each = 3)
alpha_vals <- rep(seq(1, 0.5, by = -0.1), 3)
walk(unique(a$position), function(pos){
n_champs <- unique(a$champion[a$position  == pos]) %>% length
p <- a %>% filter(n_games >=  8, position  == pos)
max_y <- (max(p$resid*100) + 1) %>% signif(digits = 2)
a %>% filter(n_games >=  8, position  == pos) %>%
ggplot(aes(x = goldspent, y = resid*100,
color = champion, shape = champion)) +
geom_point(aes(alpha = champion), stroke = 0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, ncol = 4) +
theme_minimal() +
labs(y = "% difference from expected",
x = "expected damage to champs") +
theme(panel.spacing = unit(1, "lines"),
axis.text.x = element_text(size = 7)) +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_abline(aes(slope = 1, intercept = 0), color = "gray") +
scale_y_continuous(breaks = seq(-100, max_y, by = 50),
minor_breaks = seq(-100, max_y, by = 10))
nrows <- ceiling(unique(p$player) %>% length %>% `/`(4))
ggsave(paste0(savefolder, lpre_folders[j], "/Rankings/", lg,
"_breakdown_", pos, ".png"),
width = 9, height = 2.2*nrows)
})
})

ggplot(matchdata %>% filter(position == pos),
aes(x = goldspent, y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, i, "/Diagnostics/residual_vs_gold_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
# ggplot(matchdata %>% filter(position == pos),
#        aes(x = gamelength, y = resid)) +
#   facet_wrap(~champion, scales = "free") +
#   geom_point(aes(shape = factor(result),
#                  color = factor(result)), alpha = 0.7) +
#   scale_color_manual(values = c(blue, red)) +
#   geom_hline(aes(yintercept = 0), color = "gray") +
#   theme_minimal() +
#   theme(axis.text = element_text(size = 8))
#
# ggsave(paste0(savefolder, i, "/Diagnostics/residual_vs_time_graph_", pos, ".png"),
#        height = ceiling(n_champs/4)*1.5, width = 8.5)
} else if (i == 14) {
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = gamelength, y = dmgtochamps)) +
geom_point(aes(shape = factor(result), color = factor(result)),
alpha = 0.5) +
geom_line(aes(group = factor(result), color = factor(result),
y = predicted)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(y = "dmgtochamps")
ggsave(paste0(savefolder, i, "/Diagnostics/prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(shape = factor(result), color = factor(result)),
alpha = 0.5) +
geom_line(aes(group = factor(result), color = factor(result),
y = predicted)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(y = "dmgtochamps")
ggsave(paste0(savefolder, i, "/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
ggplot(matchdata %>% filter(position == pos),
aes(x = dmgtochamps, y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x =  "dmgtochampsperminute")
ggsave(paste0(savefolder, i, "/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
ggplot(matchdata %>% filter(position == pos),
aes(x = goldspent, y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x =  "dmgtochampsperminute")
ggsave(paste0(savefolder, i, "/Diagnostics/residual_vs_gold_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
} else {
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = gamelength, y = dmgtochamps)) +
geom_point(alpha = 0.5) +
geom_line(data = predictions %>% filter(position == pos)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_ribbon(aes(ymin = lwr, ymax = upr),
fill = yellow,
data = predictions %>% filter(position == pos),
alpha = 0.7
) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(title = "OKS set to median")
ggsave(paste0(savefolder, i, "/Diagnostics/prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(alpha = 0.5) +
geom_line(data = predictions %>% filter(position == pos)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_ribbon(aes(ymin = lwr, ymax = upr),
fill = yellow,
data = predictions %>% filter(position == pos),
alpha = 0.7
) +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(title = "OKS set to median")
ggsave(paste0(savefolder, i, "/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
ggplot(predictions %>% filter(position == pos),
aes(x = sqrt(dmgtochamps), y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8)) +
labs(x="sqrt(predicted dmgtochamps)")
ggsave(paste0(savefolder, i, "/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
}
}, fit)
}
output_diagnostics(4, matchdata, r_models)
output_diagnostics(11, matchdata, r_models)
output_diagnostics(12, matchdata, r_models)
output_diagnostics(13, matchdata, r_models)
output_diagnostics(14, matchdata, r_models)
xmatrix <- model.matrix(dmgtochamps ~ champion*goldspent + position*goldspent + result,
data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xmatrix,beta0)
fitted <- exp(xmatrix %*% temp$beta.hat)
source("LPRE.R")
xmatrix <- model.matrix(dmgtochamps ~ champion*goldspent + position*goldspent + result,
data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xmatrix,beta0)
fitted <- exp(xmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
(residuals/fitted)^2 %>% mean
matchdata$predicted <- exp(xmatrix %*% temp$beta.hat)
matchdata$resid <- (matchdata$dmgtochamps - matchdata$predicted)/matchdata$predicted
fitted <- exp(xpredmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
(residuals/fitted)^2 %>% mean
plot(residuals/fitted ~ log(fitted))
abline(h = 0)
plot(residuals/matchdata$dmgtochamps ~ log(fitted))
r_gold <- range(matchdata$goldspent)
champ_pos <- unique(matchdata[,c("champion", "position")])
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
predictions <- map2_df(champ_pos$champion, champ_pos$position, function(champ, pos){
r_gold <- matchdata %>% filter(champion == champ, position == pos) %>%
`$`(goldspent) %>% range()
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
tibble(
goldspent = rep(goldseq, 2),
result = rep(c(0,1), each = len_g),
predicted = NA,
resid = NA,
champion = champ,
position = pos
)  })
xpredmatrix <- model.matrix(~ champion*log(goldspent) + position*log(goldspent) + result,
data = predictions)
predictions$predicted <- exp(xpredmatrix %*% temp$beta.hat)
predictions$resid <- (predictions$predicted - predictions$predicted)/predictions$predicted
matchdata$resid <- as.vector(matchdata$resid)
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position == pos]))
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(color = factor(result)), alpha = 0.3) +
geom_line(aes(y = predicted),
data=predictions %>% filter(position == pos)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, "LPRE_result/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 10)
ggplot(matchdata %>% filter(position == pos),
aes(x = log(predicted), y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, "LPRE_result/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
}
)
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) ,
by = c("player", "position"))
walk(unique(adj_data$league), function(lg){
a <- adj_data %>% filter(league  == lg)
a %>%
select(league, team, player, champion, dmgtochamps, predicted, goldspent) %>%
write_csv(paste0(savefolder, "LPRE_result/Rankings/", lg, "_dmg_vals.csv"))
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits = 2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, "LPRE_result/Rankings/", lg, "_dmg_ratings.csv"))
cd <- a %>% filter(n_games >=  8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
median_predicted = median(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff = ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- cd %>%
left_join(cd %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)),
by = "position")
cd %>%
ggplot(aes(x = mean_r, y = median_r)) +
labs(y = "median % resid", size = "% of highest prediction/position",
x = "mean % resid") +
geom_point(aes(size = avg_predicted/max_predicted), alpha = 0.7) +
geom_abline(aes(slope = 1, intercept = 0), color = "gray", linetype = "dotdash") +
geom_vline(aes(xintercept = 0), color = "gray") +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_text_repel(aes(label = player), force = 3,
size = 2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, "LPRE_result/Rankings/", lg, "_meanvsmedian_graph.png"),
width = 10, height = 7.5)
cd %>%
ggplot(aes(x = median_predicted, y = median_r)) +
geom_point(alpha = 0.7) +
# geom_abline(aes(slope = 1, intercept = 0), color = "gray", linetype = "dotdash") +
# geom_vline(aes(xintercept = 0), color = "gray") +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_text_repel(aes(label = player),
size = 2) +
facet_wrap(~position, scales = "free_x") +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, "LPRE_result/Rankings/", lg, "graph_byposition.png"),
width = 10, height = 7.5)
color_vals <- rep(c(blue, yellow, red), 6)
shape_vals <- rep(1:6, each = 3)
alpha_vals <- rep(seq(1, 0.5, by = -0.1), 3)
walk(unique(a$position), function(pos){
n_champs <- unique(a$champion[a$position  == pos]) %>% length
p <- a %>% filter(n_games >=  8, position  == pos)
max_y <- (max(p$resid) + 0.1) %>% round(digits = 1)
a %>% filter(n_games >=  8, position  == pos) %>%
ggplot(aes(x = goldspent, y = resid, color = champion, shape = champion)) +
geom_point(aes(alpha = champion), stroke = 0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, nrow = 3) +
theme_minimal() +
labs(y = "% diff") +
geom_hline(aes(yintercept = 0), color = "gray") +
geom_abline(aes(slope = 1, intercept = 0), color = "gray") +
scale_y_continuous(breaks = seq(-1, max_y, by = 0.5),
minor_breaks = seq(-1, max_y, by = 0.1))
ncols <- ceiling(n_champs/3)
ggsave(paste0(savefolder, "LPRE_result/Rankings/", lg,
"_breakdown_", pos, ".png"),
width = ncols * 2 + 1, height = 6)
})
})
xmatrix <- model.matrix(dmgtochamps ~ champion*log(goldspent) + position*log(goldspent) + result,
data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xmatrix,beta0)
fitted <- exp(xmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
(residuals/fitted)^2 %>% mean
matchdata$predicted <- exp(xmatrix %*% temp$beta.hat)
matchdata$resid <- (matchdata$dmgtochamps - matchdata$predicted)/matchdata$predicted
fitted <- exp(xpredmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
(residuals/fitted)^2 %>% mean
fitted <- exp(xmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps - fitted)
(residuals/fitted)^2 %>% mean
pdf(paste0(savefolder, "LPRE_result/Diagnostics/diagnostics.pdf"))
par(mfrow = c(1,1))
hist(residuals/fitted.values)
plot(residuals/fitted.values ~ matchdata$otherkillshare, main = "Other kill share")
abline(h = 0)
boxplot(residuals/fitted.values ~ matchdata$champion, main = "% Resid vs champion")
boxplot(residuals/fitted.values ~ factor(matchdata$result), main = "% Resid vs result")
boxplot(residuals/fitted.values ~ factor(matchdata$firedrakes), main = "% Resid vs firedrakes")
# boxplot(residuals/fitted.values ~ factor(matchdata$league), main = "Resid vs league")
# boxplot(residuals/fitted.values ~ factor(matchdata$side), main = "Resid vs side")
plot(residuals/fitted.values ~ log(matchdata$gamelength), main = "% Resid vs log(gamelength)",
ylim = c(-2,2))
abline(h = 0)
plot(residuals/fitted.values ~ matchdata$goldspent, main = "% Resid vs goldspent")
abline(h = 0)
plot(actual_r ~ matchdata$goldspent, main = "Resid vs goldspent")
abline(h = 0)
plot(residuals/fitted.values ~ log(matchdata$otherkills + 0.1), main = "% Resid vs log(otherkills)")
abline(h = 0)
plot(residuals/fitted.values ~ log(matchdata$teamkills + 0.1), main = "% Resid vs log(teamkills)")
abline(h = 0)
plot(residuals/fitted.values ~ matchdata$killshare, main = "% Resid vs killshare")
abline(h = 0)
dev.off()
r_gold <- range(matchdata$goldspent)
champ_pos <- unique(matchdata[,c("champion", "position")])
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
predictions <- map2_df(champ_pos$champion, champ_pos$position, function(champ, pos){
r_gold <- matchdata %>% filter(champion == champ, position == pos) %>%
`$`(goldspent) %>% range()
goldseq <- seq(r_gold[1], r_gold[2], by = 500)
len_g <- length(goldseq)
tibble(
goldspent = rep(goldseq, 2),
result = rep(c(0,1), each = len_g),
predicted = NA,
resid = NA,
champion = champ,
position = pos
)  })
xpredmatrix <- model.matrix(~ champion*log(goldspent) + position*log(goldspent) + result,
data = predictions)
predictions$predicted <- exp(xpredmatrix %*% temp$beta.hat)
predictions$resid <- (predictions$predicted - predictions$predicted)/predictions$predicted
matchdata$resid <- as.vector(matchdata$resid)
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position == pos]))
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(color = factor(result)), alpha = 0.3) +
geom_line(aes(y = predicted),
data=predictions %>% filter(position == pos)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, "LPRE_result/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 10)
ggplot(matchdata %>% filter(position == pos),
aes(x = log(predicted), y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, "LPRE_result/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
}
)
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position == pos]))
matchdata %>% filter(position == pos) %>%
ggplot(aes(x = goldspent, y = dmgtochamps)) +
geom_point(aes(color = factor(result)), alpha = 0.3) +
geom_line(aes(y = predicted, color=factor(result), group=factor(result)),
data=predictions %>% filter(position == pos)) +
scale_color_manual(values = c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, "LPRE_result/Diagnostics/gold_prediction_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 10)
ggplot(matchdata %>% filter(position == pos),
aes(x = log(predicted), y = resid)) +
facet_wrap(~champion, scales = "free", ncol = 4) +
geom_point(aes(shape = factor(result),
color = factor(result)), alpha = 0.7) +
scale_color_manual(values = c(blue, red)) +
geom_hline(aes(yintercept = 0), color = "gray") +
theme_minimal() +
theme(axis.text = element_text(size = 8))
ggsave(paste0(savefolder, "LPRE_result/Diagnostics/residual_graph_", pos, ".png"),
height = ceiling(n_champs/4)*1.5, width = 8.5)
}
)
colnames(predictions)
?spread
compare_result <- predictions %>%
spread(result, predicted)
View(compare_result)
?fct_recode
compare_result <- predictions %>%
mutate(
result = fct_relevel(win=1, loss=0)
) %>%
spread(result, predicted) #%>%
compare_result <- predictions %>%
mutate(
result = fct_relevel(result, win=1, loss=0)
) %>%
spread(result, predicted) #%>%
compare_result <- predictions %>%
mutate(
result = result %>% factor %>% fct_relevel(win=1, loss=0)
) %>%
spread(result, predicted) #%>%
predictions %>%
mutate(
result = result %>% factor %>% fct_relevel(win=1, loss=0)
) %>% View
factor(predictions$result) %>% levels
compare_result <- predictions %>%
mutate(
result = result %>% factor %>% fct_relevel(win="1", loss="0")
) %>%
spread(result, predicted) #%>%
factor(predictions$result) %>% fct_relevel(win = "1", loss = "0")
factor(predictions$result) %>% fct_relevel(`1` = "win", `0` = "loss")
compare_result <- predictions %>%
mutate(
result = ifelse(result > 0, "win", "loss")
) %>%
spread(result, predicted) #%>%
compare_result <- predictions %>%
mutate(
result = ifelse(result > 0, "win", "loss")
) %>%
spread(result, predicted) %>%
mutate(diff = win - loss)
pos
compare_result %>%
filter(position == pos) %>%
ggplot(aes(x=goldspent, y=diff))
compare_result %>%
filter(position == pos) %>%
ggplot(aes(x=goldspent, y=diff)) +
geom_line()
compare_result %>%
filter(position == pos) %>%
ggplot(aes(x=goldspent, y=diff)) +
geom_line() +
facet_wrap(~champion, scales = "free", ncol = 4)
compare_result %>%
filter(position == pos) %>%
ggplot(aes(x=goldspent, y=diff)) +
geom_line() +
facet_wrap(~champion, scales = "free", ncol = 4) +
theme_minimal()
compare_result %>%
filter(position == pos) %>%
ggplot(aes(x=loss, y=diff)) +
geom_line() +
facet_wrap(~champion, scales = "free", ncol = 4) +
theme_minimal()
temp$beta.hat
compare_result <- predictions %>%
mutate(
result = ifelse(result > 0, "win", "loss")
) %>%
spread(result, predicted) %>%
mutate(
diff = win - loss,
percent_diff = diff/loss)
compare_result %>%
filter(position == pos) %>%
ggplot(aes(x=loss, y=percent_diff)) +
geom_line() +
facet_wrap(~champion, scales = "free", ncol = 4) +
theme_minimal()
exp(0.078558173)
sink(paste0(savefolder, "LPRE_result/Diagnostics/fit_summary.txt"))
temp$beta.hat
sink()
xpredmatrix <- model.matrix(dmgtochamps ~ champion*log(goldspent) + position*log(goldspent),
data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xpredmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xpredmatrix,beta0)
sink(paste0(savefolder, "LPRE/Diagnostics/fit_summary.txt"))
temp$beta.hat
sink()
xmatrix <- model.matrix(dmgtochamps ~ champion*position + result,
data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xmatrix,beta0)
temp$beta.hat
temp = findroot(matchdata$dmgtochamps,xmatrix,beta0)
beta0
xmatrix <- model.matrix(dmgtochamps ~ result + champion*position,
data = matchdata)
beta0 = lm(log(matchdata$dmgtochamps)~xmatrix-1)$coeff
temp = findroot(matchdata$dmgtochamps,xmatrix,beta0)
temp$beta.hat
beta0
beta0[1:10]
exp(0.21782359)
median(matchdata$dmgtochamps)
11555*0.8
11555*0.08
mean(matchdata$dmgtochamps)*0.08

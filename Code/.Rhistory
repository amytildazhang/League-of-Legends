)
matrix(rep(3, 9), nrow=3)/matrix(rep(2, 9), nrow=3)
matrix(rep(3, 9), nrow=3)/matrix(c(rep(2, 3), rep(3, 6)), nrow=3)
weights <- diag(1/matchdata$dmgtochamps)
weights[1,]
?model.matrix
r_models
X <- model.matrix(dmgtochamps ~ champion + position*log(goldspent),
data=matchdata)
View(X)
length(r_models)
r_models[[16]]
r_models[[4]]
re.match <- tibble(
champion=matchdata$champion,
position=matchdata$position,
goldspent=log(matchdata$goldspent)/matchdata$dmgtochamps,
y=1
)
fit <- lm(y ~ champion + position*goldspent, data=re.match)
summary(fit)
newcoef <- solve(t(X)%*%weights%*%weights%*%X)%*%t(X)%*%weights%*%weights%*%matchdata$dmgtochamps
fit <- lm(r_models[[4]], data=matchdata)
newcoef
fitted.values <- X%*%newcoef
residuals <- matchdata$dmgtochamps - fitted.values
plot(residuals ~ fitted.values)
plot(residuals/fitted.values ~ fitted.values)
plot(residuals/fitted.values ~ fitted.values, ylim=c(-1,1))
plot(residuals/fitted.values ~ fitted.values, ylim=c(-2,2))
sum((residuals/fitted.values)^2)
residuals/fitted.values
summary(residuals/fitted.values)
plot(residuals/matchdata$dmgtochamps ~ fitted.values)
matchdata$residuals <- residuals/fitted.values
matchdata$predicted <- fitted.values
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) )
lg <- "NALCS"
a <- adj_data %>% filter(league == lg)
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
warnings()
View(a)
colnames(a)
matchdata$resid <- residuals/fitted.values
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted)#,
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
# raw_avg_dmg = mean(dmgtochamps)
) #%>%
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
View(c)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
View(cd)
resid
a <- adj_data %>% filter(league == lg)
a %>%
select(league, team, player, champion, dmgtochamps, predicted, goldspent) %>%
write_csv(paste0(savefolder, i, "/Rankings/", lg, "_dmg_vals.csv"))
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(residuals)*100,
# median_r = median(residuals)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
colnames(a)
matchdata$resid <- residuals/fitted.values
matchdata$predicted <- fitted.values
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) )
a <- adj_data %>% filter(league == lg)
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) #%>%
colnames(a)
hist(residuals)
boxplot(residuals ~ matchdata$champion, main="% Resid vs champion")
boxplot(residuals ~ factor(matchdata$result), main="% Resid vs result")
boxplot(actual_r ~ factor(matchdata$result), main="Resid vs result")
boxplot(residuals ~ factor(matchdata$firedrakes), main="% Resid vs firedrakes")
plot(residuals ~ log(matchdata$gamelength), main="% Resid vs log(gamelength)")
plot(residuals ~ matchdata$goldspent, main="% Resid vs goldspent")
abline(h=0)
hist(residuals/fitted.values)
plot(residuals/fitted.values ~ log(matchdata$gamelength), main="% Resid vs log(gamelength)")
plot(residuals/fitted.values ~ log(matchdata$gamelength), main="% Resid vs log(gamelength)",
ylim=c(-2,2))
plot(residuals/fitted.values ~ matchdata$goldspent, main="% Resid vs goldspent")
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = NA, #predicted
resid = residuals,
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = NA, #predicted
resid = residuals/fitted.values,
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA)
residuals/fitted.values
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = NA, #predicted
resid = residuals/fitted.values,
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = NA, #predicted
resid = vector(residuals/fitted.values),
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
?vector
typeof(residuals/fitted.values)
dim(residuals/fitted.values)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = NA, #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values, #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values[,1], #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
pos <- "Top"
n_champs <- length(unique(matchdata$champion[matchdata$position==pos]))
n_champs <- length(unique(matchdata$champion[matchdata$position==pos]))
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=gamelength, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
X <- model.matrix(dmgtochamps ~ champion + position*goldspent,
data=matchdata)
newcoef <- solve(t(X)%*%weights%*%weights%*%X)%*%t(X)%*%weights%*%weights%*%matchdata$dmgtochamps
fitted.values <- X%*%newcoef
residuals <- matchdata$dmgtochamps - fitted.values
sum((residuals/fitted.values)^2)
X <- model.matrix(dmgtochamps ~ champion + position*log(goldspent),
data=matchdata)
newcoef <- solve(t(X)%*%weights%*%weights%*%X)%*%t(X)%*%weights%*%weights%*%matchdata$dmgtochamps
fitted.values <- X%*%newcoef
residuals <- matchdata$dmgtochamps - fitted.values
sum((residuals/fitted.values)^2)
X <- model.matrix(dmgtochamps ~ champion + position*goldspent,
data=matchdata)
newcoef <- solve(t(X)%*%weights%*%weights%*%X)%*%t(X)%*%weights%*%weights%*%matchdata$dmgtochamps
fitted.values <- X%*%newcoef
residuals <- matchdata$dmgtochamps - fitted.values
sum((residuals/fitted.values)^2)
plot(residuals/fitted.values ~ fitted.values)
sq.re <- function(Y, X, betas){
fit <- X %*% betas
sum((Y/fit - 1)^2)
}
numderiv <- function(Y, X, betas){
upper <- sq.re(Y, X, betas+0.0001)
lower <- sq.re(Y, X, betas-0.0001)
return((upper-lower)/0.0002)
}
re.match <- tibble(
dmgtochamps = 1,
champion = matchdata$champion,
position= matchdata$position,
goldspent=matchdata$goldspent/matchdata$dmgtochamps
)
fit <- lm(1 ~ -1 + champion + position*goldspent, data=re.match)
fit <- lm(1 ~ 0 + champion + position*goldspent, data=re.match)
fit <- lm(dmgtochamps ~ -1 + champion + position*goldspent, data=re.match)
summary(fit)
fit <- lm(dmgtochamps ~ -1 + champion:goldspent + position:goldspent, data=re.match)
summary(fit)
plot(fit)
plot(fit, ask=F)
fitted.values <- fit$fitted.values*matchdata$dmgtochamps
residuals <- fit$residuals*matchdata$dmgtochamps
plot(residuals/fitted.values ~ fitted.values)
sum((residuals/fitted.values)^2)
plot(residuals/matchdata$dmgtochamps ~ fitted.values)
summary(residuals/fitted.values)
(residuals/fitted.values)^2 %>% mean
matchdata$resid <- residuals/fitted.values
matchdata$predicted <- fitted.values
hist(residuals/fitted.values)
plot(residuals/fitted.values ~ matchdata$otherkillshare, main="Other kill share")
abline(h=0)
boxplot(residuals/fitted.values ~ matchdata$champion, main="% Resid vs champion")
boxplot(residuals/fitted.values ~ factor(matchdata$result), main="% Resid vs result")
boxplot(residuals/fitted.values ~ factor(matchdata$firedrakes), main="% Resid vs firedrakes")
plot(residuals/fitted.values ~ matchdata$goldspent, main="% Resid vs goldspent")
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values[,1], #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values, #predicted
resid = (residuals/fitted.values),
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
n_champs <- length(unique(matchdata$champion[matchdata$position==pos]))
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=gamelength, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=goldspent, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
re.match <- tibble(
dmgtochamps = 1,
champion = matchdata$champion,
position= matchdata$position,
goldspent=log(matchdata$goldspent)/matchdata$dmgtochamps
)
fit <- lm(dmgtochamps ~ -1 + champion:goldspent + position:goldspent, data=re.match)
plot(fit, ask=F)
fitted.values <- fit$fitted.values*matchdata$dmgtochamps
residuals <- fit$residuals*matchdata$dmgtochamps
fit$fitted.values <- fit$fitted.values*matchdata$dmgtochamps
fit$residuals<- fit$residuals*matchdata$dmgtochamps
plot(fit, ask=F)
matchdata$resid <- fit$residuals/fit$fitted.values
matchdata$predicted <- fit$fitted.values
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values, #predicted
resid = (residuals/fitted.values),
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
n_champs <- length(unique(matchdata$champion[matchdata$position==pos]))
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=goldspent, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
weights <- diag(1/matchdata$dmgtochamps)
X <- model.matrix(dmgtochamps ~ champion + position*goldspent,
data=matchdata)
newcoef <- solve(t(X)%*%weights%*%weights%*%X)%*%t(X)%*%weights%*%weights%*%matchdata$dmgtochamps
fitted.values <- X%*%newcoef
residuals <- matchdata$dmgtochamps - fitted.values
(residuals/fitted.values)^2 %>% mean
matchdata$resid <- residuals
matchdata$predicted <- fitted.values
plot(residuals/fitted.values ~ fitted.values)
plot(residuals/matchdata$dmgtochamps ~ fitted.values)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values, #predicted
resid = (residuals/fitted.values),
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values[,1], #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=goldspent, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
(residuals/fitted.values)^2 %>% mean
X <- model.matrix(dmgtochamps ~ champion + position*exp(goldspent),
data=matchdata)
newcoef <- solve(t(X)%*%weights%*%weights%*%X)%*%t(X)%*%weights%*%weights%*%matchdata$dmgtochamps
fitted.values <- X%*%newcoef
residuals <- matchdata$dmgtochamps - fitted.values
(residuals/fitted.values)^2 %>% mean
sq.re <- function(Y, X, betas){
fit <- X %*% betas
sum((Y-exp(fit))^2/(Y*exp(fit)))
}
fit <- lm(log(dmgtochamps) ~ champion + position*log(goldspent), data=matchdata)
X <- model.matrix(log(dmgtochamps) ~ champion + position*log(goldspent))
X <- model.matrix(log(dmgtochamps) ~ champion + position*log(goldspent),
data=matchdata)
betas <- matrix(rep(NA, max_iter*ncol(X)), ncol=ncol(X))
max_iter <- 100000
sqre <- rep(NA, max_iter)
deriv <- rep(NA, max_iter)
fit <- lm(log(dmgtochamps) ~ champion + position*log(goldspent), data=matchdata)
X <- model.matrix(log(dmgtochamps) ~ champion + position*log(goldspent),
data=matchdata)
betas <- matrix(rep(NA, max_iter*ncol(X)), ncol=ncol(X))
fit$coefficients
ncol(X)
betas[1,] <- fit$coefficients
for (iter in 2:max_iter){
sqre[iter] <- sq.re(matchdata$dmgtochamps, X, betas[iter-1,])
deriv[iter] <- sq.re.dev(matchdata$dmgtochamps, X, betas[iter-1,])
betas[iter,] <- betas[iter-1,] -  (sqre[iter]/deriv[iter])
if (deriv[iter] < 0.0001) break;
}
sq.re <- function(Y, X, betas){
fit <- X %*% betas
sum((Y-exp(fit))^2/(Y*exp(fit)))
}
sq.re.dev <- function(Y, X, betas){
sapply(1:length(Y), function(i){
1/Y[i]*(sum(X[i,])*exp(t(-X[i,])*betas)*(exp(2*t(X[i,])*betas)-y^2))
}) %>%
sum
}
for (iter in 2:max_iter){
sqre[iter] <- sq.re(matchdata$dmgtochamps, X, betas[iter-1,])
deriv[iter] <- sq.re.dev(matchdata$dmgtochamps, X, betas[iter-1,])
betas[iter,] <- betas[iter-1,] -  (sqre[iter]/deriv[iter])
if (deriv[iter] < 0.0001) break;
}
sq.re.dev <- function(Y, X, betas){
sapply(1:length(Y), function(i){
1/Y[i]*(sum(X[i,])*exp(t(-X[i,])*betas)*(exp(2*t(X[i,])*betas)-Y[i]^2))
}) %>%
sum
}
for (iter in 2:max_iter){
sqre[iter] <- sq.re(matchdata$dmgtochamps, X, betas[iter-1,])
deriv[iter] <- sq.re.dev(matchdata$dmgtochamps, X, betas[iter-1,])
betas[iter,] <- betas[iter-1,] -  (sqre[iter]/deriv[iter])
if (deriv[iter] < 0.0001) break;
}
betas
deriv
deriv[2]
for (iter in 2:max_iter){
sqre[iter] <- sq.re(matchdata$dmgtochamps, X, betas[iter-1,])
deriv[iter] <- sq.re.dev(matchdata$dmgtochamps, X, betas[iter-1,])
betas[iter,] <- betas[iter-1,] -  (sqre[iter]/deriv[iter])
if (deriv[iter] %>% abs < 0.0001) break;
}
sum(!is.na(sqre))

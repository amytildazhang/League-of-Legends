predgold <- predict(goldfit, newdata=mids[test_idx,])
pgold <- mse_pred(predgold, mids$goldspent[test_idx]) %>% sqrt
mids$golddev <- NA
mids$golddev[train_idx] <- mids$goldspent[train_idx] - goldfit$fitted.values
mids$golddev[test_idx] <- mids$goldspent[test_idx]
fit <- lm(dmgtochampsperminute ~ gamelength + earnedgpm,
data=mids[train_idx,])
fit2 <- lm(dmgtochamps ~ goldspent,
data=mids[train_idx,])
fit3 <- lm(dmgtochamps ~ goldspent + gamelength,
data=mids[train_idx,])
fit4 <- lm(sqrt(dmgtochamps) ~ gamelength,
data=mids[train_idx,])
pred1 <- predict(fit, newdata=mids[test_idx,])
pred2 <- predict(fit2, newdata=mids[test_idx,])
pred3 <- predict(fit3, newdata=mids[test_idx,])
pred4 <- predict(fit4, newdata=mids[test_idx,])
pred1 <- predict(fit, newdata=mids[test_idx,])
p2 <- mse_pred(pred2, mids$dmgtochamps[test_idx]) %>% sqrt
p3 <- mse_pred(pred3, mids$dmgtochamps[test_idx]) %>% sqrt
p4 <- mse_pred(pred4^2, mids$dmgtochamps[test_idx]) %>% sqrt
mids$dmgdev <- NA
mids$dmgdev[train_idx] <- (mids$dmgtochamps[train_idx] - fit4$fitted.values^2)/100
mids$dmgdev[test_idx] <- (mids$dmgtochamps[test_idx] - pred4^2)/100
#to get # of times each champ played
n_champs <- mids %>% group_by(champion) %>% summarise(n_played=n())
mids$champ_display <- factor(mids$champion)
levels(mids$champ_display) <- n_champs$n_played
mids$champ_display <- paste0(mids$champion, "\n", mids$champ_display)
champs <- mids %>% filter(player %in% c("Bjergsen", "Jensen")) %>%
group_by(player, champion) %>% summarise(n_played=n())  %>% select(champion, player, n_played)
bjchamps <- champs %>% filter(player=="Bjergsen", n_played >=3) %>%
`$`(champion) %>% unique
jnchamps <- champs %>% filter(player=="Jensen", n_played >=3) %>%
`$`(champion) %>% unique
mids <- mids %>% mutate(
atleast3 = map_chr(champion, function(x){
if (x %in% bjchamps & x %in% jnchamps) {return("BJ")}
else if (x %in% bjchamps) { return("Bjergsen")}
else if (x %in% jnchamps) {return("Jensen")}
else {return(NA)}
}),
borj = map_chr(player, function(x){
if (x %in% c("Bjergsen", "Jensen")) return(x)
else {return(NA)}
}) #%>% factor %>% fct_expand("BJ")
)
analysis_cols <- c(16:18,22:26,28:32)
mids <- mids %>% filter(champion %in% champs$champion)
#to make sig tests less of a headache
bjerg <- mids %>% filter(player=="Bjergsen")
jensen <- mids %>% filter(player=="Jensen")
medianlines <- mids %>%
gather("stat", "value", analysis_cols) %>%
group_by(stat) %>%
summarise(player="all", median=median(value)) %>%
bind_rows( #rbind ot medians of just bjergsen/jensen
mids %>%  filter(player %in% c("Bjergsen", "Jensen")) %>%
gather("stat", "value", analysis_cols) %>%
group_by(player, stat) %>% summarise(median=median(value))
) %>%
spread(stat, median)
#colors
yellow <- "#C4A20A"
green <- "#006112"
blue <- "#0980B2"
red <- "#FF020A"
purple <- "#85016E"
darkgray <- "#3e3e3e"
medgray <- "#5e5e5e"
limegreen <- "#00D628"
skyblue <- "#0CA5E5"
maroon <- "#8F0106"
deeppurp <- "#450139"
comparison <- mids %>% filter(player %in% c("Bjergsen", "Jensen")) %>%
gather("stat", "value", analysis_cols)
shared_champs <- mids %>%
filter(player %in% c("Bjergsen", "Jensen")) %>%
group_by(champion) %>%
summarise(shared=length(unique(player)) == 2) %>%
filter(shared==TRUE) %>% `$`(champion)
ggplot(comparison,aes(x=player, y=value, fill=player)) +
geom_boxplot(alpha=0.7) +
# geom_point(data=filter(comparison, champion %in% shared_champs)) +
facet_wrap(~stat, scales="free", nrow=2) +
scale_fill_manual(values=c(yellow, blue)) +
scale_color_manual(values=c(yellow, blue)) +
theme_minimal() +
theme(axis.text.x=element_blank()) +
labs(y=NULL, x=NULL, fill=NULL)
comparison %>%
filter(champion %in% shared_champs) %>%
ggplot(aes(x=player, y=value, fill=player)) +
geom_boxplot(alpha=0.7) +
facet_wrap(~stat, scales="free", nrow=2) +
scale_fill_manual(values=c(yellow, blue)) +
scale_color_manual(values=c(yellow, blue)) +
theme_minimal() +
theme(axis.text.x=element_blank()) +
labs(y=NULL, x=NULL, fill=NULL)
stat_sigs <- comparison %>%
filter(champion %in% shared_champs) %>%
spread(player, value) %>%
group_by(stat) %>%
summarise(
mean_bjerg = mean(Bjergsen, na.rm=TRUE) %>% round(digits=4),
mean_jensen = mean(Jensen, na.rm=TRUE) %>% round(digits=4),
se_bjerg = var(Bjergsen, na.rm=TRUE) %>% sqrt %>% round(digits=2),
se_jensen = var(Jensen, na.rm=TRUE) %>% sqrt %>% round(digits=2),
n_bjerg = sum(!is.na(Bjergsen)),
n_jensen = sum(!is.na(Jensen)),
pval = t.test(Bjergsen, Jensen,conf.level=0.9)$p.value %>% round(digits=5)
) %>%
mutate(
pval_adj = p.adjust(pval, method="fdr") %>% round(digits=3),
significant=ifelse(pval_adj <= sig_thresh, "x", ""),
power=apply(cbind(mean_bjerg, mean_jensen, n_bjerg, n_jensen), 1, function(row){
pwr.2p2n.test(h=row[1]-row[2],
n1=row[3], n2=row[4],
sig.level=sig_thresh,
alternative="two.sided")
}) %>% map_dbl(function(p){
p$power %>% round(digits=2)
})
)
knitr::kable(stat_sigs %>%
select(stat, mean_bjerg, mean_jensen,
power, pval_adj, significant),
align=c("l", "r", "r", "r", "r", "c")) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
#if we're going to analyze whether stats are affected
#by champion or by player, we have to remove those champions
#where that question is one and the same (e.g. Huhi's A-Sol)
#relationship b/w player and champion
ca <- mids %>% group_by(player, champion) %>%
summarise(n_played=n()) %>%
arrange(desc(n_played)) %>%
ggplot(aes_string(x="player", y="champion")) +
geom_tile(fill=deeppurp)
champfreq <- mids %>% group_by(player, champion) %>%
summarise(n_played=n()) %>%
group_by(champion) %>%
summarise(
total_games=sum(n_played),
n_players = n()
)
keep_champs <- champfreq %>% #remove from consideration champs not played by many players
filter(n_players >= 3) %>%
`$`(champion)
#construct dataset for analysis
aovdf <- mids %>%
filter(player %in% c("Bjergsen", "Jensen")) %>%
# filter(champion %in% keep_champs) %>%
gather("stat", "y", analysis_cols) %>%
mutate(
player=factor(player),
champion=factor(champion)
)
n_player <- aovdf$player %>% unique %>% length
n_champ <- aovdf$champion %>% unique %>% length
fits <- map(unique(aovdf$stat), function(sname, aovdf){
mod <- aov(y~champion + player,
data=filter(aovdf, stat==sname),
contrasts=list(player=contr.sum, champion=contr.sum))
list(fit=mod, name=sname)
}, aovdf)
# par(mfrow=c(5,3))
# diag_plots <- walk(fits, function(fit){
#   plot(fit$fit, which=1, main=fit$name)
# })
fit_summaries <- map_df(fits, function(mod){
sname <- mod$name
mod <- mod$fit
fit <- Anova(mod, type=2)
# fit <- mod$fit %>% summary %>% `[[`(1)
tibble(
stat=sname,
F_champion = fit$`F value`[1],
F_player = fit$`F value`[2],
p_champion = fit$`Pr(>F)`[1] %>% round(digits=5),
p_player = fit$`Pr(>F)`[2] %>% round(digits=5)
)
}) %>% mutate(
p_champion_adj = p.adjust(p_champion, method="fdr") %>% round(digits=3),
p_player_adj = p.adjust(p_player, method="fdr") %>% round(digits=3)
)
knitr::kable(fit_summaries %>%
mutate(
sig_player=ifelse(p_player_adj > sig_thresh, "", "x"),
sig_champion=ifelse(p_champion_adj > sig_thresh, "", "x")
) %>%
arrange(stat) %>%
select(stat, sig_player, sig_champion),
"markdown", align=c("l", "c", "c"))
colnames(fit_summaries)
g <- mids %>% filter(player %in% c("Bjergsen", "Jensen")) %>%
select(player, champion) %>%
group_by(player, champion) %>%
summarise(n_games=n()) %>%
spread(player, n_games, fill='') %>%
select(champion, Bjergsen, Jensen)
knitr::kable(g, align=c("l", "r", "r")) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
ggplot(mids, aes(x=reorder(player, -dmgdev, median), y=dmgdev,
fill=borj)) +
scale_fill_manual(values=c(yellow, blue, "white")) + labs(x=NULL, fill=NULL) +
geom_boxplot(alpha=0.7) +
guides(fill=FALSE) +
geom_hline(aes(yintercept=median(dmgdev)),
linetype="4424", color="#8f8f8f") +
theme_minimal()
mids$champ_display %<>% factor %>%
fct_relevel(
mids %>% group_by(champ_display) %>%
summarise(mean_stat = median(dmgdev)) %>%
arrange(desc(mean_stat)) %>%
`$`(champ_display) %>% as.character
)
mids$champ_display %<>% factor %>%
fct_relevel(
mids %>% group_by(champ_display) %>%
summarise(mean_stat = median(dmgdev)) %>%
arrange(desc(mean_stat)) %>%
`$`(champ_display) %>% as.character
)
mids %>%
ggplot(aes(x=champ_display, y=dmgdev)) +
geom_hline(aes(yintercept=dmgdev, color=player),
linetype="4424", data=medianlines, alpha=0.8) +
geom_boxplot(aes(fill=atleast3), alpha=0.3) +
scale_fill_manual(values=c(green, yellow, blue, "white")) +
geom_point(aes(color=player),
data=filter(mids, player %in% c("Bjergsen", "Jensen"))) +
scale_color_manual(values=c("black", yellow, blue)) +
labs(color=NULL, fill="played at least 3 games:", x=NULL) +
theme_minimal() +
theme(legend.position="bottom")
ggplot(mids, aes(x=reorder(player, -earnedgoldshare, median), y=earnedgoldshare,
fill=borj)) +
scale_fill_manual(values=c(yellow, blue, "white")) + labs(x=NULL, fill=NULL) +
geom_boxplot(alpha=0.7) +
guides(fill=FALSE) +
geom_hline(aes(yintercept=median(earnedgoldshare)),
linetype="4424", color="#8f8f8f") +
theme_minimal()
ggplot(mids, aes(x=reorder(champ_display, -earnedgoldshare, median), y=earnedgoldshare)) +
geom_hline(aes(yintercept=earnedgoldshare, color=player),
linetype="4424", data=medianlines, alpha=0.8) +
geom_boxplot(aes(fill=atleast3), alpha=0.3) +
scale_fill_manual(values=c(green, yellow, blue, "white")) +
geom_point(aes(color=player),
data=filter(mids, player %in% c("Bjergsen", "Jensen"))) +
scale_color_manual(values=c("black", yellow, blue)) +
labs(color=NULL, fill="played at least 3 games:", x=NULL) +
theme_minimal() +
theme(legend.position="bottom")
colnames(medianlines)
colnames(fit_summaries)
colnames(mids)
analysis_cols <- c(22:26,28, 30:32)
mids <- mids %>% filter(champion %in% champs$champion)
setwd("~/Dropbox/WTF/Code")
library(here)
library(tidyverse)
library(readxl)
library(stringr)
library(forcats)
library(ggrepel)
summerfile <- here("Data") %>% list.files %>%
`[`(str_detect(., "^2017-summer"))
teamgold15 <- read_xlsx(paste0("Data/", summerfile) %>% here,
col_types=c("text", rep("guess", 90))) %>%
filter(player=="Team") %>%
select(gameid, league, team, gdat15, result)
savefolder <- here("Output/lead_deficit_15mins/")
library(here)
library(tidyverse)
library(readxl)
library(stringr)
library(forcats)
library(magrittr)
matchdata <- here("Data/") %>%
paste0(list.files(.)) %>%
map_df(read_xlsx, col_types=c(rep("text", 4), "date",
rep("text", 14),
rep("numeric", 72))) %>%
filter(player != "Team") %>%
select(gameid, league, split, week, game, team, side, player,
position, champion, gamelength, result, k, a, teamkills,
firedrakes, dmgtochamps, dmgtochampsperminute,
earnedgpm, goldspent, totalgold, dmgshare) %>%
filter(!(week %in% c("QF", "T", "F", "R1", "R2",
"R3", "RR", "SF", "3P"))) %>%
mutate(week=week %>% as.numeric) %>%
filter(split=="2017-2" | week >= 9) %>%
filter(!is.na(dmgtochamps)) %>%
mutate(otherkills=teamkills-k-a,
killshare=k/teamkills)
savefolder <- here("Output/dmg_rating/")
matchdata <- matchdata %>%
group_by(position, player, champion) %>%
summarise(n_games=n()) %>%
group_by(position, champion) %>%
summarise(n_total=sum(n_games),
max_by_one=max(n_games),
min_leftover=n_total-max_by_one) %>%
filter(min_leftover >= 5) %>%
inner_join(matchdata)
models <- c(sqrt(dmgtochamps) ~ champion + log(goldspent) + log(otherkills + .1),
sqrt(dmgtochamps) ~ champion + log(goldspent),
sqrt(dmgtochamps) ~ champion + log(goldspent) + result,
sqrt(dmgtochamps) ~ champion + log(goldspent) + league,
sqrt(dmgtochamps) ~ champion*side + log(goldspent) + league)
eval_fit <- function(fit, dataset){
par(mfrow=c(2,2))
plot(fit, ask=F)
par(mfrow=c(1,1))
boxplot(fit$residuals ~ dataset$champion, main="Resid vs champion")
boxplot(fit$residuals ~ factor(dataset$result), main="Resid vs result")
boxplot(fit$residuals ~ factor(dataset$firedrakes), main="Resid vs firedrakes")
# boxplot(fit$residuals ~ factor(dataset$league), main="Resid vs league")
# boxplot(fit$residuals ~ factor(dataset$side), main="Resid vs side")
plot(fit$residuals ~ log(dataset$gamelength), main="Resid vs log(gamelength)")
abline(h=0)
plot(fit$residuals ~ dataset$goldspent, main="Resid vs goldspent")
abline(h=0)
plot(fit$residuals ~ log(dataset$otherkills + 0.1), main="Resid vs log(otherkills)")
abline(h=0)
plot(fit$residuals ~ log(dataset$teamkills + 0.1), main="Resid vs log(teamkills)")
abline(h=0)
plot(fit$residuals ~ dataset$killshare, main="Resid vs killshare")
abline(h=0)
summary(fit)
}
compare_pred <- function(models, dataset){
set.seed(710)
train_idx <- sample.int(nrow(dataset), floor(0.7*nrow(dataset)))
test_idx <- setdiff(1:nrow(dataset), train_idx)
walk(1:length(models), function(i){
fit1 <- lm(models[[i]], data=dataset[train_idx,])
pred1 <- predict(fit1, newdata=dataset[test_idx,])
paste0("Fit ", i, ": ", mse_pred(pred1, dataset[test_idx,]$dmgtochamps)) %>% print
})
}
matchdata <- matchdata %>% arrange(champion)
top <- matchdata %>% filter(position=="Top")
jungle <- matchdata %>% filter(position=="Jungle")
mid <- matchdata %>% filter(position=="Middle")
adc <- matchdata %>% filter(position=="ADC")
sup <- matchdata %>% filter(position=="Support")
model <- models[[2]]
dataset <- mid
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)*100) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_vline(xintercept = 0, color="gray") +
theme(axis.text.y = element_text(size=8))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_vline(aes(xintercept = 0), color="gray") +
theme(axis.text.y = element_text(size=8))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_hline(aes(yintercept = 0), color="gray") +
theme(axis.text.y = element_text(size=8))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_hline(aes(yintercept = 0), color="red") +
theme(axis.text.y = element_text(size=8))
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)*100) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_hline(aes(yintercept = 0), color="red") +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
player_games <- matchdata %>% group_by(player) %>% summarise(p_games=n())
matchdata <- matchdata %>% group_by(player) %>%
summarise(p_games=n()) %>%
right_join(matchdata)
View(matchdata)
matchdata <- matchdata %>% arrange(champion)
top <- matchdata %>% filter(position=="Top")
jungle <- matchdata %>% filter(position=="Jungle")
mid <- matchdata %>% filter(position=="Middle")
adc <- matchdata %>% filter(position=="ADC")
sup <- matchdata %>% filter(position=="Support")
dataset <- top
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)*100) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(paste0(player, " (", p_games, ")"), perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_hline(aes(yintercept = 0), color="red") +
theme(axis.text.y = element_text(size=8))
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)*100) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(paste0(player, " (", p_games, ")"), perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_hline(aes(yintercept = 0), color="red") +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
matchdata <- here("Data/") %>%
paste0(list.files(.)) %>%
map_df(read_xlsx, col_types=c(rep("text", 4), "date",
rep("text", 14),
rep("numeric", 72))) %>%
filter(player != "Team") %>%
select(gameid, league, split, week, game, team, side, player,
position, champion, gamelength, result, k, a, teamkills,
firedrakes, dmgtochamps, dmgtochampsperminute,
earnedgpm, goldspent, totalgold, dmgshare) %>%
filter(!(week %in% c("QF", "T", "F", "R1", "R2",
"R3", "RR", "SF", "3P"))) %>%
mutate(week=week %>% as.numeric) %>%
filter(split=="2017-2" | week >= 9) %>%
filter(!is.na(dmgtochamps)) %>%
mutate(otherkills=teamkills-k-a,
killshare=k/teamkills)
matchdata <- matchdata %>%
group_by(position, player, champion) %>%
summarise(n_games=n()) %>%
group_by(position, champion) %>%
summarise(n_total=sum(n_games),
max_by_one=max(n_games),
min_leftover=n_total-max_by_one) %>%
filter(min_leftover >= 5) %>%
inner_join(matchdata)
matchdata <- matchdata %>% group_by(player) %>%
summarise(p_games=n()) %>%
filter(p_games > 10) %>%
right_join(matchdata)
matchdata <- matchdata %>% arrange(champion)
top <- matchdata %>% filter(position=="Top")
jungle <- matchdata %>% filter(position=="Jungle")
mid <- matchdata %>% filter(position=="Middle")
adc <- matchdata %>% filter(position=="ADC")
sup <- matchdata %>% filter(position=="Support")
model <- models[[2]]
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)

values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, nrow=3) +
theme_minimal() +
labs(y="% diff") +
geom_hline(aes(yintercept=0), color="gray") +
geom_abline(aes(slope=1, intercept=0), color="gray") +
scale_y_continuous(breaks=seq(-1, max_y, by=0.5),
minor_breaks=seq(-1, max_y, by=0.1))
a %>% filter(n_games >= 8, position == pos) %>%
ggplot(aes(x=goldspent, y=resid, color=champion, shape=champion)) +
geom_point(aes(alpha=champion), stroke=0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, nrow=3) +
theme_minimal() +
labs(y="% diff") +
geom_hline(aes(yintercept=0), color="gray") +
geom_abline(aes(slope=1, intercept=0), color="gray") +
scale_y_continuous(breaks=seq(-1, max_y, by=0.5),
minor_breaks=seq(-1, max_y, by=0.1))
summary(matchdata$resid)
residuals <- (matchdata$dmgtochamps-fitted)
(residuals/fitted)^2 %>% mean
fitted <- exp(xmatrix %*% temp$beta.hat)
residuals <- (matchdata$dmgtochamps-fitted)
(residuals/fitted)^2 %>% mean
matchdata$resid <- residuals/fitted
matchdata$predicted <- fitted
fitted.values <- fitted
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values[,1], #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) ,
by=c("player", "position"))
a <- adj_data %>% filter(league == lg)
n_champs <- unique(a$champion[a$position == pos]) %>% length
p <- a %>% filter(n_games >= 8, position == pos)
max_y <- (max(p$resid) + 0.1) %>% round(digits=1)
a %>% filter(n_games >= 8, position == pos) %>%
ggplot(aes(x=goldspent, y=resid, color=champion, shape=champion)) +
geom_point(aes(alpha=champion), stroke=0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, nrow=3) +
theme_minimal() +
labs(y="% diff") +
geom_hline(aes(yintercept=0), color="gray") +
geom_abline(aes(slope=1, intercept=0), color="gray") +
scale_y_continuous(breaks=seq(-1, max_y, by=0.5),
minor_breaks=seq(-1, max_y, by=0.1))
ggplot(predictions %>% filter(position==pos),
aes(x=log(dmgtochamps), y=resid)) +
facet_wrap(~champion, scales="free") +
geom_point(aes(shape=factor(result),
color=factor(result)), alpha=0.7) +
scale_color_manual(values=c(blue, red)) +
geom_hline(aes(yintercept=0), color="gray") +
theme_minimal() +
theme(axis.text=element_text(size=8))
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
# avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
# avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
)# %>%
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
# avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
a$resid
dim(a$resid)
dim(a$player)
dim(c(residuals))
matchdata$resid <- c(residuals/fitted)
fitted.values <- fitted
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values[,1], #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) ,
by=c("player", "position"))
a <- adj_data %>% filter(league == lg)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
dim(a$resid)
a$resid
length(a$resid)
dim(a)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
# mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
table(a$resid)
typeof(a$resid)
a$predicted
matchdata$predicted <- c(fitted)
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) ,
by=c("player", "position"))
a <- adj_data %>% filter(league == lg)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
# median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- cd %>%
left_join(cd %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)))
cd %>%
ggplot(aes(x=mean_r, y=median_r)) +
labs(y="median % resid", size="% of highest prediction/position",
x="mean % resid") +
geom_point(aes(size=avg_predicted/max_predicted), alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=predicted, y=mean_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
# geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
# geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player),
size=2) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player),
size=2) +
facet_wrap(~position, scales="free_x") +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=median_predicted, y=median_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player),
size=2) +
facet_wrap(~position, scales="free_x") +
theme_minimal() +
theme(legend.position = "bottom")
cd %>%
ggplot(aes(x=avg_predicted, y=median_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player),
size=2) +
facet_wrap(~position, scales="free_x") +
theme_minimal() +
theme(legend.position = "bottom")
a <- matchdata$otherkills/matchdata$teamkills
pdf(paste0(savefolder, "LPRE/Diagnostics/diagnostics.pdf"))
a <- matchdata$otherkills/matchdata$teamkills
pdf(paste0(savefolder, "LPRE/Diagnostics/diagnostics.pdf"))
par(mfrow=c(1,1))
hist(residuals/fitted.values)
plot(residuals/fitted.values ~ matchdata$otherkillshare, main="Other kill share")
abline(h=0)
boxplot(residuals/fitted.values ~ matchdata$champion, main="% Resid vs champion")
boxplot(residuals/fitted.values ~ factor(matchdata$result), main="% Resid vs result")
boxplot(residuals/fitted.values ~ factor(matchdata$firedrakes), main="% Resid vs firedrakes")
# boxplot(residuals/fitted.values ~ factor(matchdata$league), main="Resid vs league")
# boxplot(residuals/fitted.values ~ factor(matchdata$side), main="Resid vs side")
plot(residuals/fitted.values ~ log(matchdata$gamelength), main="% Resid vs log(gamelength)",
ylim=c(-2,2))
abline(h=0)
plot(residuals/fitted.values ~ matchdata$goldspent, main="% Resid vs goldspent")
abline(h=0)
plot(actual_r ~ matchdata$goldspent, main="Resid vs goldspent")
abline(h=0)
plot(residuals/fitted.values ~ log(matchdata$otherkills + 0.1), main="% Resid vs log(otherkills)")
abline(h=0)
plot(residuals/fitted.values ~ log(matchdata$teamkills + 0.1), main="% Resid vs log(teamkills)")
abline(h=0)
plot(residuals/fitted.values ~ matchdata$killshare, main="% Resid vs killshare")
abline(h=0)
dev.off()
fitted.values <- fitted
predictions <- tibble(
goldspent = matchdata$goldspent,
gamelength= matchdata$gamelength,
result = matchdata$result,
dmgtochamps = fitted.values[,1], #predicted
resid = (residuals/fitted.values)[,1],
champion = matchdata$champion,
position = matchdata$position,
dmgtochampsperminute = NA
)
walk(c("Top", "Jungle", "Middle", "ADC", "Support"), function(pos){
n_champs <- length(unique(matchdata$champion[matchdata$position==pos]))
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=gamelength, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
matchdata %>% filter(position==pos) %>%
ggplot(aes(x=goldspent, y=dmgtochamps)) +
geom_point(alpha=0.5) +
geom_line(data=predictions %>% filter(position==pos)) +
scale_color_manual(values=c(blue, red)) +
facet_wrap(~champion) +
theme_minimal() +
theme(axis.text=element_text(size=8))
ggplot(predictions %>% filter(position==pos),
aes(x=log(dmgtochamps), y=resid)) +
facet_wrap(~champion, scales="free") +
geom_point(aes(shape=factor(result),
color=factor(result)), alpha=0.7) +
scale_color_manual(values=c(blue, red)) +
geom_hline(aes(yintercept=0), color="gray") +
theme_minimal() +
theme(axis.text=element_text(size=8))
ggsave(paste0(savefolder, "LPRE/Diagnostics/residual_graph_", pos, ".png"),
height=ceiling(n_champs/4)*1.5, width=8.5)
}
)
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) ,
by=c("player", "position"))
walk(unique(adj_data$league), function(lg){
a <- adj_data %>% filter(league == lg)
a %>%
select(league, team, player, champion, dmgtochamps, predicted, goldspent) %>%
write_csv(paste0(savefolder, "LPRE/Rankings/", lg, "_dmg_vals.csv"))
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits=2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, "LPRE/Rankings/", lg, "_dmg_ratings.csv"))
cd <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
cd <- cd %>%
left_join(cd %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)),
by="position")
cd %>%
ggplot(aes(x=mean_r, y=median_r)) +
labs(y="median % resid", size="% of highest prediction/position",
x="mean % resid") +
geom_point(aes(size=avg_predicted/max_predicted), alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, "LPRE/Rankings/", lg, "_meanvsmedian_graph.png"),
width=10, height=7.5)
cd %>%
ggplot(aes(x=avg_predicted, y=median_r)) +
geom_point(alpha=0.7) +
# geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player),
size=2) +
facet_wrap(~position, scales="free_x") +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, "LPRE/Rankings/", lg, "_bypos.png"),
width=10, height=7.5)
color_vals <- rep(c(blue, yellow, red), 6)
shape_vals <- rep(1:6, each=3)
alpha_vals <- rep(seq(1, 0.5, by=-0.1), 3)
walk(unique(a$position), function(pos){
n_champs <- unique(a$champion[a$position == pos]) %>% length
p <- a %>% filter(n_games >= 8, position == pos)
max_y <- (max(p$resid) + 0.1) %>% round(digits=1)
a %>% filter(n_games >= 8, position == pos) %>%
ggplot(aes(x=goldspent, y=resid, color=champion, shape=champion)) +
geom_point(aes(alpha=champion), stroke=0.8) +
scale_colour_manual(name = "Champion",
values = color_vals[1:n_champs]) +
scale_shape_manual(name = "Champion",
values = shape_vals[1:n_champs]) +
scale_alpha_manual(name = "Champion",
values = alpha_vals[1:n_champs]) +
facet_wrap(~player, nrow=3) +
theme_minimal() +
labs(y="% diff") +
geom_hline(aes(yintercept=0), color="gray") +
geom_abline(aes(slope=1, intercept=0), color="gray") +
scale_y_continuous(breaks=seq(-1, max_y, by=0.5),
minor_breaks=seq(-1, max_y, by=0.1))
ncols <- ceiling(n_champs/3)
ggsave(paste0(savefolder, "LPRE/Rankings/", lg,
"_breakdown_", pos, ".png"),
width=ncols*2+1, height=6)
})
})
plot(matchdata$resid ~ matchdata$league)
boxplot(matchdata$resid ~ matchdata$league)
ggplot(matchdata, aes(x=position, y=resid)) +
geom_boxplot() +
facet_wrap(~league)
ggplot(matchdata, aes(x=league, y=resid)) +
geom_boxplot() +
theme_minimal()+
facet_wrap(~position)
ggplot(matchdata, aes(x=league, y=resid)) +
geom_violin() +
theme_minimal()+
facet_wrap(~position)
?geom_violin
ggplot(matchdata, aes(x=league, y=resid)) +
geom_violin(draw_quantiles=c(0.25, 0.5,0.75)) +
theme_minimal()+
facet_wrap(~position)

write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=8, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
matchdata <- here("Data/") %>%
paste0(list.files(.)) %>%
map_df(read_xlsx, col_types=c(rep("text", 4), "date",
rep("text", 14),
rep("numeric", 72))) %>%
filter(player != "Team") %>%
select(gameid, league, split, week, game, team, side, player,
position, champion, gamelength, result, k, a, teamkills,
firedrakes, dmgtochamps, dmgtochampsperminute,
earnedgpm, goldspent, totalgold, dmgshare) %>%
filter(!(week %in% c("QF", "T", "F", "R1", "R2",
"R3", "RR", "SF", "3P"))) %>%
mutate(week=week %>% as.numeric) %>%
filter(split=="2017-2" | week >= 9) %>%
filter(!is.na(dmgtochamps)) %>%
mutate(otherkills=teamkills-k-a,
killshare=k/teamkills)
matchdata <- matchdata %>%
group_by(position, player, champion) %>%
summarise(n_games=n()) %>%
group_by(position, champion) %>%
summarise(n_total=sum(n_games),
max_by_one=max(n_games),
min_leftover=n_total-max_by_one) %>%
filter(min_leftover >= 5) %>%
inner_join(matchdata)
a
top <- matchdata %>% filter(position=="Top")
jungle <- matchdata %>% filter(position=="Jungle")
mid <- matchdata %>% filter(position=="Mid")
adc <- matchdata %>% filter(position=="ADC")
sup <- matchdata %>% filter(position=="Support")
model <- models[[2]]
topfit <- lm(model, top)
jungfit <- lm(model, jungle)
midfit <- lm(model, mid)
adcfit <- lm(model, adc)
supfit <- lm(model, sup)
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=8, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
model
colnames(top)
top$champion
topfit <- lm(model, top)
jungfit <- lm(model, jungle)
midfit <- lm(model, mid)
mid <- matchdata %>% filter(position=="Middle")
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=8, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
xlim(-1,1) +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
?xlim
dataset <- top
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
xlim(-1,1) +
theme(axis.text.y = element_text(size=8))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
xlim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
#  ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
dataset <- adc
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
#  ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
summary(matchdata$goldspent)
midfit
midfit %>% summary
summary(matchdata$goldspent)
summary(matchdata$dmgtochamps)
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_vline(xintercept = 0, color="gray") +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)
eval_fit(topfit, top)
eval_fit(jungfit, jungle)
models[[1]]
models[[6]] <- sqrt(dmgtochamps) ~ champion + log(goldspent) +log(gamelength)
model2 <- models[[6]]
topfit2 <- lm(model2, top)
eval_fit(topfit2, top)
summary(lm, model2, jungle)
summary(lm(model2, jungle))
summary(jungfit)
summary(lm(model2, mid))
summary(lm(model2, adc))
summary(lm(model2, sup))
summary(lm(model, sup))
compare_pred(models, sup) #3, 2, 1
compare_pred(models, jungle) #1, 2, 3
compare_pred(models, mid) #3, 1, 2
compare_pred(models, adc) #3, 2, 1
compare_pred(models, sup) #1, 2, 3
eval_fit(midfit, mid)
eval_fit(midfit, mid)
matchdata <- matchdata %>% arrange(champion)
top <- matchdata %>% filter(position=="Top")
jungle <- matchdata %>% filter(position=="Jungle")
mid <- matchdata %>% filter(position=="Middle")
adc <- matchdata %>% filter(position=="ADC")
sup <- matchdata %>% filter(position=="Support")
model <- models[[2]]
topfit <- lm(model, top)
jungfit <- lm(model, jungle)
midfit <- lm(model, mid)
adcfit <- lm(model, adc)
supfit <- lm(model, sup)
eval_fit(topfit, top)
eval_fit(jungfit, jungle)
eval_fit(adcfit, adc)
adc[c(596, 588, 589),] %>% View
base + geom_point(aes(x=killshare))
eval_fit <- function(fit, dataset){
par(mfrow=c(2,2))
plot(fit, ask=F)
par(mfrow=c(1,1))
boxplot(fit$residuals ~ dataset$champion, main="Resid vs champion")
boxplot(fit$residuals ~ factor(dataset$result), main="Resid vs result")
boxplot(fit$residuals ~ factor(dataset$firedrakes), main="Resid vs firedrakes")
# boxplot(fit$residuals ~ factor(dataset$league), main="Resid vs league")
# boxplot(fit$residuals ~ factor(dataset$side), main="Resid vs side")
plot(fit$residuals ~ log(dataset$gamelength), main="Resid vs log(gamelength)")
abline(h=0)
plot(fit$residuals ~ dataset$goldspent, main="Resid vs goldspent")
abline(h=0)
plot(fit$residuals ~ log(dataset$otherkills + 0.1), main="Resid vs log(otherkills)")
abline(h=0)
plot(fit$residuals ~ log(dataset$teamkills + 0.1), main="Resid vs log(teamkills)")
abline(h=0)
plot(fit$residuals ~ killshare, main="Resid vs killshare")
abline(h=0)
summary(fit)
}
eval_fit(topfit, top)
matchdata <- here("Data/") %>%
paste0(list.files(.)) %>%
map_df(read_xlsx, col_types=c(rep("text", 4), "date",
rep("text", 14),
rep("numeric", 72))) %>%
filter(player != "Team") %>%
select(gameid, league, split, week, game, team, side, player,
position, champion, gamelength, result, k, a, teamkills,
firedrakes, dmgtochamps, dmgtochampsperminute,
earnedgpm, goldspent, totalgold, dmgshare) %>%
filter(!(week %in% c("QF", "T", "F", "R1", "R2",
"R3", "RR", "SF", "3P"))) %>%
mutate(week=week %>% as.numeric) %>%
filter(split=="2017-2" | week >= 9) %>%
filter(!is.na(dmgtochamps)) %>%
mutate(otherkills=teamkills-k-a,
killshare=k/teamkills)
matchdata <- here("Data/") %>%
paste0(list.files(.)) %>%
map_df(read_xlsx, col_types=c(rep("text", 4), "date",
rep("text", 14),
rep("numeric", 72))) %>%
filter(player != "Team") %>%
select(gameid, league, split, week, game, team, side, player,
position, champion, gamelength, result, k, a, teamkills,
firedrakes, dmgtochamps, dmgtochampsperminute,
earnedgpm, goldspent, totalgold, dmgshare) %>%
filter(!(week %in% c("QF", "T", "F", "R1", "R2",
"R3", "RR", "SF", "3P"))) %>%
mutate(week=week %>% as.numeric) %>%
filter(split=="2017-2" | week >= 9) %>%
filter(!is.na(dmgtochamps)) %>%
mutate(otherkills=teamkills-k-a,
killshare=k/teamkills)
matchdata <- matchdata %>%
group_by(position, player, champion) %>%
summarise(n_games=n()) %>%
group_by(position, champion) %>%
summarise(n_total=sum(n_games),
max_by_one=max(n_games),
min_leftover=n_total-max_by_one) %>%
filter(min_leftover >= 5) %>%
inner_join(matchdata)
matchdata <- matchdata %>% arrange(champion)
top <- matchdata %>% filter(position=="Top")
jungle <- matchdata %>% filter(position=="Jungle")
mid <- matchdata %>% filter(position=="Middle")
adc <- matchdata %>% filter(position=="ADC")
sup <- matchdata %>% filter(position=="Support")
topfit <- lm(model, top)
jungfit <- lm(model, jungle)
midfit <- lm(model, mid)
adcfit <- lm(model, adc)
supfit <- lm(model, sup)
eval_fit(topfit, top)
eval_fit <- function(fit, dataset){
par(mfrow=c(2,2))
plot(fit, ask=F)
par(mfrow=c(1,1))
boxplot(fit$residuals ~ dataset$champion, main="Resid vs champion")
boxplot(fit$residuals ~ factor(dataset$result), main="Resid vs result")
boxplot(fit$residuals ~ factor(dataset$firedrakes), main="Resid vs firedrakes")
# boxplot(fit$residuals ~ factor(dataset$league), main="Resid vs league")
# boxplot(fit$residuals ~ factor(dataset$side), main="Resid vs side")
plot(fit$residuals ~ log(dataset$gamelength), main="Resid vs log(gamelength)")
abline(h=0)
plot(fit$residuals ~ dataset$goldspent, main="Resid vs goldspent")
abline(h=0)
plot(fit$residuals ~ log(dataset$otherkills + 0.1), main="Resid vs log(otherkills)")
abline(h=0)
plot(fit$residuals ~ log(dataset$teamkills + 0.1), main="Resid vs log(teamkills)")
abline(h=0)
plot(fit$residuals ~ dataset$killshare, main="Resid vs killshare")
abline(h=0)
summary(fit)
}
eval_fit <- function(fit, dataset){
par(mfrow=c(2,2))
plot(fit, ask=F)
par(mfrow=c(1,1))
boxplot(fit$residuals ~ dataset$champion, main="Resid vs champion")
boxplot(fit$residuals ~ factor(dataset$result), main="Resid vs result")
boxplot(fit$residuals ~ factor(dataset$firedrakes), main="Resid vs firedrakes")
# boxplot(fit$residuals ~ factor(dataset$league), main="Resid vs league")
# boxplot(fit$residuals ~ factor(dataset$side), main="Resid vs side")
plot(fit$residuals ~ log(dataset$gamelength), main="Resid vs log(gamelength)")
abline(h=0)
plot(fit$residuals ~ dataset$goldspent, main="Resid vs goldspent")
abline(h=0)
plot(fit$residuals ~ log(dataset$otherkills + 0.1), main="Resid vs log(otherkills)")
abline(h=0)
plot(fit$residuals ~ log(dataset$teamkills + 0.1), main="Resid vs log(teamkills)")
abline(h=0)
plot(fit$residuals ~ dataset$killshare, main="Resid vs killshare")
abline(h=0)
summary(fit)
}
eval_fit(topfit, top)
eval_fit(jungfit, jungle)
all_dmg %>% group_by(position) %>% summarise(mean=mean(perc_diff))
save_dmg_rating <- function(dataset, model){
fit <- lm(model, dataset)
a <- dataset %>% mutate(
perc_diff=fit$residuals/fit$fitted.values)
a %>%
group_by(league, team, player) %>%
summarise(dmg_performance = mean(perc_diff)*100) %>%
arrange(league, desc(dmg_performance)) %T>%
write_csv(paste0(savefolder, dataset$position[1], "_dmg_ratings.csv"))
ggplot(a,  aes(x=fct_reorder(player, perc_diff, mean), y=perc_diff)) +
ylim(-1,1) +
coord_flip() +
facet_grid(league ~., scales="free", space="free") +
geom_boxplot() +
labs(x=NULL, y="% difference of actual damage from expected") +
theme_minimal() +
geom_vline(xintercept = 0, color="gray") +
theme(axis.text.y = element_text(size=8))
ggsave(paste0(savefolder, dataset$position[1], "_graph.png"),
width=6, height=14)
return(a)
}
all_dmg <- map_df(list(top, jungle, mid, adc, sup),
save_dmg_rating, model=model)

fit$residuals <- (matchdata$dmgtochamps - exp(fit$fitted.values))/
fit$fitted.values
matchdata$predicted <- fit$fitted.values %>% exp
}
matchdata$resid <- fit$residuals
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) )
walk(unique(adj_data$league), function(lg){
a <- adj_data %>% filter(league == lg)
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits=2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, i, "/Rankings/", lg, "_dmg_ratings.csv"))
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
c <- c %>%
left_join(c %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)))
c %>%
ggplot(aes(x=mean_r, y=median_r)) +
labs(y="median % resid", size="% of highest prediction/position",
x="mean % resid") +
geom_point(aes(size=avg_predicted/max_predicted), alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_meanvsmedian_graph.png"),
width=10, height=7.5)
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(player, " (", n_games, ")")) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
ylim(-100,100) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
stat_summary(fun.y=mean, geom="point",
size=0.8, shape=8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=30,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=24, height=5)
ranks +
facet_wrap(~position, scales="free_x", ncol=1)
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_byposition.png"),
width=8, height=23)
})
i <- 4
fit <- lm(r_models[[i]], matchdata)
actual_r <- fit$residuals
if (i == 13){
fit$residuals <- (matchdata$dmgtochampsperminute - fit$fitted.values)/
fit$fitted.values
matchdata$predicted <- fit$fitted.values
} else {
fit$residuals <- (matchdata$dmgtochamps - exp(fit$fitted.values))/
fit$fitted.values
matchdata$predicted <- fit$fitted.values %>% exp
}
if (i == 13){
fit$residuals <- (matchdata$dmgtochampsperminute - fit$fitted.values)/
fit$fitted.values
matchdata$predicted <- fit$fitted.values
} else {
fit$residuals <- (matchdata$dmgtochamps - fit$fitted.values^2)/
fit$fitted.values^2
matchdata$predicted <- fit$fitted.values^2
}
matchdata$resid <- fit$residuals
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) )
a <- adj_data %>% filter(league == lg)
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits=2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, i, "/Rankings/", lg, "_dmg_ratings.csv"))
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
c <- c %>%
left_join(c %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)))
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(player, " (", n_games, ")")) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
ylim(-100,100) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
stat_summary(fun.y=mean, geom="point",
size=0.8, shape=8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=30,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=24, height=5)
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=5)
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(player, " (", n_games, ")")) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
ylim(-100,100) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
geom_point(aes(y=mean_r), shape=8, size=0.8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=30,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=5)
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=4)
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(player, " (", n_games, ")")) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
ylim(-100,100) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
geom_point(aes(y=mean_r), shape=8, size=0.8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=20,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=4)
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(" (", n_games, ") ", player)) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
ylim(-100,100) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
geom_point(aes(y=mean_r), shape=8, size=0.8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=20,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=3)
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(" (", n_games, ") ", player)) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
geom_point(aes(y=mean_r), shape=8, size=0.8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=20,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=3)
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=30, height=5)
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=40, height=5)
ranks +
facet_wrap(~position, scales="free_x")
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_byposition.png"),
width=8, height=8)
ranks +
facet_wrap(~position, scales="free_x") +
theme(axis.text.x=element_text(angle=20,hjust=1,size=8))
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_byposition.png"),
width=8, height=8)
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_byposition.png"),
width=15, height=8)
c %>%
ggplot(aes(x=mean_r, y=median_r)) +
labs(y="median % resid", size="% of highest prediction/position",
x="mean % resid") +
geom_point(aes(size=avg_predicted/max_predicted), alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
colnames(c)
c %>%
ggplot(aes(x=avg_predicted, y=avg_dmg)) +
geom_point(alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=avg_dmg)) +
geom_point(alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_text_repel(aes(label=player),
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=avg_dmg)) +
geom_point(aes(label=player), alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
# geom_text_repel(aes(label=player),
#                 size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=avg_dmg)) +
geom_point( alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=avg_dmg)) +
geom_point( alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray") +
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=raw_avg_dmg)) +
geom_point( alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray") +
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point( alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray") +
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
geom_hline(aes(yintercept=0), alpha=0.7, size=1)
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
geom_hline(aes(yintercept=0), alpha=0.7, size=1),
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7) +
geom_hline(aes(yintercept=0), alpha=0.7, size=1) +
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7, size=1) +
geom_hline(aes(yintercept=0), alpha=0.7) +
geom_text_repel(aes(label=player), force=0.5,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7, size=1) +
geom_hline(aes(yintercept=0), alpha=0.7) +
geom_text_repel(aes(label=player)) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7, size=1) +
geom_hline(aes(yintercept=0), alpha=0.7) +
geom_text_repel(aes(label=player), size=2) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7, size=2) +
geom_hline(aes(yintercept=0), alpha=0.7) +
geom_text_repel(aes(label=player), size=3) +
facet_wrap(~position, scales="free") +
theme_minimal() +
theme(legend.position = "bottom")
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7, size=2) +
geom_hline(aes(yintercept=0), alpha=0.7) +
geom_text_repel(aes(label=player), size=3) +
facet_wrap(~position, scales="free_x") +
theme_minimal() +
theme(legend.position = "bottom")
matchdata %>% filter(player=="Mash") %>% `$`(champion) %>% unique
output_rankings <- function(i, matchdata, r_models){
purple <- "#85016E"
red <- "#FF020A"
blue <- "#0980B2"
yellow <- "#C4A20A"
green <- "#006112"
fit <- lm(r_models[[i]], matchdata)
actual_r <- fit$residuals
if (i == 13){
fit$residuals <- (matchdata$dmgtochampsperminute - fit$fitted.values)/
fit$fitted.values
matchdata$predicted <- fit$fitted.values
} else {
fit$residuals <- (matchdata$dmgtochamps - fit$fitted.values^2)/
fit$fitted.values^2
matchdata$predicted <- fit$fitted.values^2
}
matchdata$resid <- fit$residuals
#remove players who role-swapped
adj_data <- matchdata %>%
left_join(matchdata %>%
group_by(player, position) %>%
summarise(n_games = n()) )
walk(unique(adj_data$league), function(lg){
a <- adj_data %>% filter(league == lg)
a %>%
group_by(position, team, player) %>%
summarise(dmg_performance = round(mean(resid)*100, digits=2)) %>%
arrange(position, desc(dmg_performance)) %>%
write_csv(paste0(savefolder, i, "/Rankings/", lg, "_dmg_ratings.csv"))
c <- a %>% filter(n_games >= 8) %>%
group_by(player, n_games, position) %>%
summarise(
total_predicted = sum(predicted),
avg_predicted = mean(predicted),
mean_r = mean(resid)*100,
median_r = median(resid)*100,
raw_avg_dmg = mean(dmgtochamps)
) %>%
mutate(#diff=ifelse(median_r > mean_r, sprintf('\u2191'), sprintf('\u2193')),
#sign = ifelse(mean_r > 0, "+", "-"),
avg_dmg = (total_predicted*mean_r + total_predicted)/n_games)
c <- c %>%
left_join(c %>% group_by(position) %>%
summarise(max_predicted = max(avg_predicted)))
c %>%
ggplot(aes(x=mean_r, y=median_r)) +
labs(y="median % resid", size="% of highest prediction/position",
x="mean % resid") +
geom_point(aes(size=avg_predicted/max_predicted), alpha=0.7) +
geom_abline(aes(slope=1, intercept=0), color="gray", linetype="dotdash") +
geom_vline(aes(xintercept=0), color="gray") +
geom_hline(aes(yintercept=0), color="gray") +
geom_text_repel(aes(label=player), force=3,
size=2, box.padding = unit(0.75, "lines")) +
facet_wrap(~position) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_meanvsmedian_graph.png"),
width=10, height=7.5)
c %>%
ggplot(aes(x=avg_predicted, y=mean_r)) +
geom_point(alpha=0.7, size=2) +
geom_hline(aes(yintercept=0), alpha=0.7) +
geom_text_repel(aes(label=player), size=3) +
facet_wrap(~position, scales="free_x") +
theme_minimal() +
theme(legend.position = "bottom") +
labs(x="average predicted damage", y="mean % difference from prediction")
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_dmgvsresid_graph.png"),
width=10, height=7.5)
ranks <- a %>% filter(n_games >= 8) %>%
mutate(resid = 100*resid,
plabel = paste0(" (", n_games, ") ", player)) %>%
left_join(c %>% select(player, position, mean_r)) %>%
arrange(desc(mean_r)) %>%
mutate(
plabel = fct_inorder(plabel)
) %>%
ggplot(aes(x=plabel, y=resid)) +
labs(y="% diff from expected", fill=NULL, x=NULL) +
geom_violin(aes(fill=position %>%
fct_relevel(c("Top", "Jungle", "Middle", "ADC", "Support"))),
alpha=0.7, draw_quantiles=0.5) +
geom_point(aes(y=mean_r), shape=8, size=0.8) +
scale_fill_manual(values=c(yellow, green, blue, red, purple)) +
#      coord_flip() +
theme_minimal() +
geom_hline(aes(yintercept=0), color="gray", linetype="dashed") +
theme(axis.text.x=element_text(angle=20,hjust=1,size=12))
ranks
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_all.png"),
width=40, height=5)
ranks +
facet_wrap(~position, scales="free_x") +
theme(axis.text.x=element_text(angle=20,hjust=1,size=8))
ggsave(paste0(savefolder, i, "/Rankings/", lg, "_graph_byposition.png"),
width=15, height=8)
})
}
output_rankings(4, matchdata, r_models)
walk(c(4,11,12,13,14), function(i){
output_rankings(i, matchdata, r_models)
})
map_dbl(r_models, function(model){
tfit <- lm(model, data=matchdata[train_idx,])
pred <- predict(tfit, newdata=matchdata[test_idx,])
actual <- matchdata$dmgtochamps[test_idx]
if (model == 13){
return((actual-pred)/pred %>% mean)
}
((actual-pred^2)/pred^2) %>% mean
})
r_models[[1]]
r_models[[11]]
